<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title>TIMP FAQ </title>
<link rel="stylesheet" type="text/css" href="R.css">
</head>

<body>

<table border="1" width="80%">
  <tr>
    <td> <h3>  On R  </h3> 

<ul>
<strong> What Is A Good Introduction To R? </strong>
a good manual is "An Introduction to R", 
in <a href="http://cran.r-project.org/doc/manuals/R-intro.pdf"> pdf </a>
and 
<a href="http://cran.r-project.org/doc/manuals/R-intro.html"> html</a>.  There
are other manuals on the  
<a href="http://r-project.org"> R website. </a>
<BR><BR>
<strong> What are classes, objects, and slots? </strong>
A class is a definition of a data structure. For instance, it may be useful to
define a class to store the information that is associated with a certain type
of model. TIMP defines the class "dat" to store information associated with
models. For kinetic model options, TIMP defines the class "kin". For spectral
models, TIMP defines the class "spec".

An object is an instance of a class. For instance, if the TIMP function
initModel is used to initialize a new kinetic model, it will return an object
of class "kin".

What is stored in an (S4) object "x" can be seen by saying "slotNames(x)".
If the object "x" stores an object called "a", you can see what the 
contents of "a" are by saying "x@a". 

The class system of R is called "The S4 class system". To read more about this
topic see e.g., 
<a href="http://developer.r-project.org/howMethodsWork.pdf"> here </a> or 
<a href="http://www.stat.ucla.edu/~cocteau/stat202a/resources/docs/S4Objects.pdf">
here </a>.
</ul>
 </tr>
  <tr>
    <td> <h3>  Plotting  </h3>  
<ul> 
<strong>   Why do I get "Error in plot.new : Figure margins too large"?  </strong>
This error means that there is no room on the page for the plots.

In TIMP, this error usually triggered by trying to place too many traces or time-resolved spectra on a page. By default, TIMP will attempt to plot all traces/time-resolved spectra. So for example,
<BR><BR>
denRes <- fitModel(list(denS4), model1, opt=list(iter=1, linrange = .2, makeps = "MARI", xlabel = "time (ps)", ylabel = "wavelength"))
<BR><BR>
will result in trying to plot all of the wavelengths in the dataset denS4.  If
there are many wavelengths, an error can be avoided by telling fitModel to plot
only selected traces. 
This requires the option selected_traces = c(indices of traces you want), for
example, as follows
<BR><BR>
denRes<-timDriver(list(denS4), model1, opt=list(iter=1, linrange = .2, makeps = "MARI", notraces = TRUE, selectedtraces = c(1,5,20,32), xlabel = "time (ps)", ylabel = "wavelength"))
<BR><BR>
If you want to plot every nth wavelength (i.e., trace) then the seq function is very handy. For instance, you can use it to plot every third wavelength with
<BR><BR>
selectedtraces = seq(1, 32, by=3)
<BR><BR>
which means to go from wavelength 1 to 32 in steps of 3. To see documentation on seq, see its help page by saying
<BR><BR>
help(seq)
<BR><BR> 
in R; also see the help page of "kin.opt" for more on the selectedtraces
option.  
<BR><BR> </UL>
 </tr>
    <td> <h3> Windows-specific FAQ</a> </h3>
      <ul> 
    <strong> How do I specify a path to my data file so that TIMP can read it? </strong>
 To specify a path to your data file so that TIMP can read it, you need to
 escape the front-slashes in the path with another front slash. For example: <BR>
<BR><BR>
dataIN <- readData("D:\\Documents and Settings\\administrator\\Desktop\\data.ivo")
<BR><BR>
If you want to avoid having to specify a long path to your data, you can set
the working directory for R by going to File and then "set directory" in the R
GUI. For example, if you have the data file "data.ivo" in "mydirectory" you can
set the working directory to "mydirectory" and then just say (without the
complete path to the data):
<BR><BR>
dataIn <- readData("data.ivo")
<BR><BR>
 <strong>    How do I keep all my data and output files for TIMP organized? </strong>
 You can organize your data in separate folders.

Then before you start using TIMP, under the File menu of the RGui, choose "set directory" and set the working directory to the folder where your data is. This allows you to read in data by specifying only the file name (e.g, readData("data.ivo") as opposed to the full path to the data. It also means that all output files are written to this directory.

At the end of your R session you can choose to "save image" - this means that everything you have done will be saved as a file (.RData) in the working directory. If you click on .RData later your session will be opened.
<BR><BR> 
  </tr>
</table>
</div>

</body> </html>
