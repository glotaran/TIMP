set.seed(123)
tests = c("nls", "nls-scaled", "nls.lm")
alsoTestKin = FALSE

# Simulation input arguments
kinpar = c(0.055, 0.005)
amplitudes =  c(1, 1)
tmax =  80
deltat =  1
specpar =  list(c(22000, 4000, 0.1), c(20000, 3500, -0.1))
lmin =  400
lmax =  600
deltal =  5
sigma =  0.05
irf =  FALSE
irfpar = c(2, 1)
seqmod = FALSE
# Fit arguments
streak = FALSE
streakT = 13164.8235
positivepar = TRUE
iters = 77
specvec = specpar

# Simulating data with function call:
simData <-
  #TIMP::simndecay_gen(
  paramGUI::simndecay_gen_paramGUI(
    kinpar = kinpar ,
    amplitudes =  amplitudes ,
    tmax =  tmax ,
    deltat =  deltat ,
    specpar = specpar ,
    lmin =  lmin ,
    lmax =  lmax ,
    deltal =  deltal ,
    sigma =  sigma ,
    irf =  irf ,
    irfpar = irfpar ,
    seqmod = seqmod
  )
simData1 <- paramGUI::simndecay_gen_paramGUI(kinpar = c(0.055, 0.005) , amplitudes =  c(1, 1) , tmax =  80 , deltat=  1 , specpar=  list(c(22000, 4000, 0.1), c(20000, 3500, -0.1)) , lmin=  400 , lmax=  600 , deltal=  5 , sigma=  0.05 , irf =  FALSE , irfpar = c( 2 , 1 ) , seqmod = FALSE )

simData2 <- paramGUI::simndecay_gen_paramGUI(kinpar = c(0.055, 0.005) , amplitudes =  c(1, 1) , tmax =  80 , deltat=  1 , specpar=  list(c(22000, 4000, 0.1), c(20000, 3500, -0.1)) , lmin=  400 , lmax=  600 , deltal=  5 , sigma=  0.005 , irf =  FALSE , irfpar = c( 2 , 1 ) , seqmod = FALSE )

exportDatasetTIMP <- function(dataset, filename) {
  cat("filename\n",file=filename)
  cat("dataset name\n",file=filename,append=TRUE)
  cat("Wavelength explicit\n",file=filename,append=TRUE)
  cat("Intervalnr ",  length(dataset@x2),"\n",file=filename,append=TRUE)
  write.table(
    x = dataset@psi.df,
    col.names = dataset@x2,
    row.names = dataset@x,
    sep = " ",
    quote = FALSE,
    file=filename,append=TRUE
  )
}

exportDatasetTIMP(simData1,"simData1.ascii")
exportDatasetTIMP(simData2,"simData2.ascii")
test_simData1<-readData("simData1.ascii")
test_simData2<-readData("simData2.ascii")

for (test in tests) {
  if (alsoTestKin) {
    kinModel <- initModel(
      mod_type = "kin",
      kinpar = kinpar * 1.1,
      irf = irf,
      irfpar = if (irf)
        irfpar
      else
        vector(),
      streak = streak,
      streakT = 13164.8235,
      positivepar = positivepar,
      seqmod = seqmod,
      lscalpar = switch(
        test,
        "nls" = FALSE,
        "nls-scaled" = TRUE,
        "nls.lm" = FALSE
      )
    )
    
    kinFit <-
      fitModel(
        data = list(simData),
        modspec = list(kinModel),
        opt = kinopt(iter = iters, plot = FALSE)
      )
    
    kinFitSummary <-
      summary(
        kinFit$currModel@fit@nlsres[[1]],
        currModel = kinFit$currModel,
        currTheta = kinFit$currTheta,
        correlation = TRUE
      )
    
    cat("For case: ", test, "\n")
    print(kinFitSummary)
  }
  
  specModel <-
    initModel(
      mod_type = "spec",
      specpar = list(specvec[[1]] * 1.05, specvec[[2]] * 0.98),
      #specpar = list(specvec[[1]], specvec[[2]]),
      nupow = 1,
      lscalpar = switch(
        test,
        "nls" = FALSE,
        "nls-scaled" = TRUE,
        "nls.lm" = FALSE
      )
    )
  
  specFit <-
    fitModel(
      data = list(simData),
      modspec = list(specModel),
      opt = specopt(
        parscale = c("abs"),
        iter = iters,
        plot = FALSE,
        algorithm = switch(
          test,
          "nls" = "nls",
          "nls-scaled" = "nls",
          "nls.lm" = "nls.lm"
        )
      )
    )
  
  specFitSummary <-
    summary(
      specFit$currModel@fit@nlsres[[1]],
      currModel = specFit$currModel,
      currTheta = specFit$currTheta,
      correlation = TRUE
    )
  
  cat("\n## For case: ", test, "##")
  print(specFitSummary)
  
}
